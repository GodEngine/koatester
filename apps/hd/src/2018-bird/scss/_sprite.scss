// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$btn-tabbar-name: 'btn_tabbar';
$btn-tabbar-x: 0px;
$btn-tabbar-y: 0px;
$btn-tabbar-offset-x: 0px;
$btn-tabbar-offset-y: 0px;
$btn-tabbar-width: 30px;
$btn-tabbar-height: 28px;
$btn-tabbar-total-width: 140px;
$btn-tabbar-total-height: 292px;
$btn-tabbar-image: '../img/sprite.png';
$btn-tabbar: (0px, 0px, 0px, 0px, 30px, 28px, 140px, 292px, '../img/sprite.png', 'btn_tabbar', );
$btn-point-name: 'btn_point';
$btn-point-x: 0px;
$btn-point-y: 30px;
$btn-point-offset-x: 0px;
$btn-point-offset-y: -30px;
$btn-point-width: 30px;
$btn-point-height: 30px;
$btn-point-total-width: 140px;
$btn-point-total-height: 292px;
$btn-point-image: '../img/sprite.png';
$btn-point: (0px, 30px, 0px, -30px, 30px, 30px, 140px, 292px, '../img/sprite.png', 'btn_point', );
$btn-transmit-name: 'btn_transmit';
$btn-transmit-x: 0px;
$btn-transmit-y: 62px;
$btn-transmit-offset-x: 0px;
$btn-transmit-offset-y: -62px;
$btn-transmit-width: 30px;
$btn-transmit-height: 30px;
$btn-transmit-total-width: 140px;
$btn-transmit-total-height: 292px;
$btn-transmit-image: '../img/sprite.png';
$btn-transmit: (0px, 62px, 0px, -62px, 30px, 30px, 140px, 292px, '../img/sprite.png', 'btn_transmit', );
$icon-blue-name: 'icon_blue';
$icon-blue-x: 0px;
$icon-blue-y: 94px;
$icon-blue-offset-x: 0px;
$icon-blue-offset-y: -94px;
$icon-blue-width: 34px;
$icon-blue-height: 34px;
$icon-blue-total-width: 140px;
$icon-blue-total-height: 292px;
$icon-blue-image: '../img/sprite.png';
$icon-blue: (0px, 94px, 0px, -94px, 34px, 34px, 140px, 292px, '../img/sprite.png', 'icon_blue', );
$btn-top-name: 'btn_top';
$btn-top-x: 0px;
$btn-top-y: 130px;
$btn-top-offset-x: 0px;
$btn-top-offset-y: -130px;
$btn-top-width: 114px;
$btn-top-height: 50px;
$btn-top-total-width: 140px;
$btn-top-total-height: 292px;
$btn-top-image: '../img/sprite.png';
$btn-top: (0px, 130px, 0px, -130px, 114px, 50px, 140px, 292px, '../img/sprite.png', 'btn_top', );
$btn-cancel-name: 'btn_cancel';
$btn-cancel-x: 0px;
$btn-cancel-y: 182px;
$btn-cancel-offset-x: 0px;
$btn-cancel-offset-y: -182px;
$btn-cancel-width: 140px;
$btn-cancel-height: 54px;
$btn-cancel-total-width: 140px;
$btn-cancel-total-height: 292px;
$btn-cancel-image: '../img/sprite.png';
$btn-cancel: (0px, 182px, 0px, -182px, 140px, 54px, 140px, 292px, '../img/sprite.png', 'btn_cancel', );
$btn-follow-name: 'btn_follow';
$btn-follow-x: 0px;
$btn-follow-y: 238px;
$btn-follow-offset-x: 0px;
$btn-follow-offset-y: -238px;
$btn-follow-width: 140px;
$btn-follow-height: 54px;
$btn-follow-total-width: 140px;
$btn-follow-total-height: 292px;
$btn-follow-image: '../img/sprite.png';
$btn-follow: (0px, 238px, 0px, -238px, 140px, 54px, 140px, 292px, '../img/sprite.png', 'btn_follow', );
$spritesheet-width: 140px;
$spritesheet-height: 292px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($btn-tabbar, $btn-point, $btn-transmit, $icon-blue, $btn-top, $btn-cancel, $btn-follow, );
$spritesheet: (140px, 292px, '../img/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

%-sprite-common {
  background-image: url(#{$spritesheet-image});
}

@mixin sprite-item($sprite) {
  @extend %-sprite-common;

  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite-item($sprite);
    }
  }
}
